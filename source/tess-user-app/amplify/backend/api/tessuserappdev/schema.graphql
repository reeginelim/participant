type EvData @model @auth(rules: [{allow: public}]) {
  id: ID!
  device_id: String
  state_of_charge: String
  charging: String
  cost: Int
  current_limit: Int
  load: String
  charger_name: String
  model: String
  manufacturer: String
  input_voltage: String
  health: String
}

type EvSchedFields {
  comfort: Int
  state_of_charge: Int
  desired_time_to_leave: AWSTimestamp
  time_to_finish_charge: AWSTimestamp
  health: Int
  type: ScheduleType
}

enum ScheduleType {
  HOME
  AWAY
  SLEEP
  VACATION
}

type HcSchedFields {
  comfort: Int
  min_temp: Int
  max_temp: Int
  start_time: AWSTimestamp
  end_time: AWSTimestamp
  type: ScheduleType
}

type SolarData @model @auth(rules: [{allow: public}]) {
  id: ID!
  device_id: String
  inverter: String
  inverter_model: String
  pv_in: String
  pv_model: String
  pv_sys: String
}

type BatteryData @model @auth(rules: [{allow: public}]) {
  id: ID!
  device_id: String
  state_of_charge: String
  charging: String
  cost: String
  desired_state_of_charge: String
  flexibility: String
  charger_name: String
  model: String
  capacity: String
  health: String
}

type EvSchedule @model @auth(rules: [{allow: public}]) {
  id: ID!
  device_id: String
  schedule: EvSchedFields
}

type HcSchedule @model @auth(rules: [{allow: public}]) {
  id: ID!
  device_id: String
  schedule: HcSchedFields
}

type HcData @model @auth(rules: [{allow: public}]) {
  id: ID!
  device_id: String
  cost: String
  in_temp: String
  load: String
  status: String
}

type TestDataModel @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String
}
 